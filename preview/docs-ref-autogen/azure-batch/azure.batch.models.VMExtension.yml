### YamlMime:PythonClass
uid: azure.batch.models.VMExtension
name: VMExtension
fullName: azure.batch.models.VMExtension
module: azure.batch.models
summary: The configuration for virtual machine extensions.
constructor:
  syntax: 'VMExtension(*args: Any, **kwargs: Any)'
variables:
- description: The name of the virtual machine extension. Required.
  name: name
  types:
  - <xref:str>
- description: The name of the extension handler publisher. Required.
  name: publisher
  types:
  - <xref:str>
- description: The type of the extension. Required.
  name: type
  types:
  - <xref:str>
- description: The version of script handler.
  name: type_handler_version
  types:
  - <xref:str>
- description: 'Indicates whether the extension should use a newer minor

    version if one is available at deployment time. Once deployed, however, the extension
    will not

    upgrade minor versions unless redeployed, even with this property set to true.'
  name: auto_upgrade_minor_version
  types:
  - <xref:bool>
- description: 'Indicates whether the extension should be automatically

    upgraded by the platform if there is a newer version of the extension available.'
  name: enable_automatic_upgrade
  types:
  - <xref:bool>
- description: JSON formatted public settings for the extension.
  name: settings
  types:
  - <xref:dict>[<xref:str>, <xref:str>]
- description: 'The extension can contain either protectedSettings or

    protectedSettingsFromKeyVault or no protected settings at all.'
  name: protected_settings
  types:
  - <xref:dict>[<xref:str>, <xref:str>]
- description: 'The collection of extension names. Collection of extension

    names after which this extension needs to be provisioned.'
  name: provision_after_extensions
  types:
  - <xref:list>[<xref:str>]
methods:
- uid: azure.batch.models.VMExtension.as_dict
  name: as_dict
  summary: Return a dict that can be turned into json using json.dump.
  signature: 'as_dict(*, exclude_readonly: bool = False) -> Dict[str, Any]'
  keywordOnlyParameters:
  - name: exclude_readonly
    description: Whether to remove the readonly properties.
    defaultValue: 'False'
    types:
    - <xref:bool>
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
- uid: azure.batch.models.VMExtension.clear
  name: clear
  summary: Remove all items from D.
  signature: clear() -> None
- uid: azure.batch.models.VMExtension.copy
  name: copy
  signature: copy() -> Model
- uid: azure.batch.models.VMExtension.get
  name: get
  summary: 'Get the value for key if key is in the dictionary, else default.

    :param str key: The key to look up.

    :param any default: The value to return if key is not in the dictionary. Defaults
    to None

    :returns: D[k] if k in D, else d.

    :rtype: any'
  signature: 'get(key: str, default: Any = None) -> Any'
  parameters:
  - name: key
    isRequired: true
  - name: default
    defaultValue: None
- uid: azure.batch.models.VMExtension.items
  name: items
  signature: items() -> ItemsView[str, Any]
  return:
    description: set-like object providing a view on D's items
    types:
    - <xref:typing.ItemsView>
- uid: azure.batch.models.VMExtension.keys
  name: keys
  signature: keys() -> KeysView[str]
  return:
    description: a set-like object providing a view on D's keys
    types:
    - <xref:typing.KeysView>
- uid: azure.batch.models.VMExtension.pop
  name: pop
  summary: 'Removes specified key and return the corresponding value.

    :param str key: The key to pop.

    :param any default: The value to return if key is not in the dictionary

    :returns: The value corresponding to the key.

    :rtype: any

    :raises KeyError: If key is not found and default is not given.'
  signature: 'pop(key: str, default: ~typing.Any = <object object>) -> Any'
  parameters:
  - name: key
    isRequired: true
  - name: default
- uid: azure.batch.models.VMExtension.popitem
  name: popitem
  summary: 'Removes and returns some (key, value) pair

    :returns: The (key, value) pair.

    :rtype: tuple

    :raises KeyError: if D is empty.'
  signature: popitem() -> Tuple[str, Any]
- uid: azure.batch.models.VMExtension.setdefault
  name: setdefault
  summary: 'Same as calling D.get(k, d), and setting D[k]=d if k not found

    :param str key: The key to look up.

    :param any default: The value to set if key is not in the dictionary

    :returns: D[k] if k in D, else d.

    :rtype: any'
  signature: 'setdefault(key: str, default: ~typing.Any = <object object>) -> Any'
  parameters:
  - name: key
    isRequired: true
  - name: default
- uid: azure.batch.models.VMExtension.update
  name: update
  summary: 'Updates D from mapping/iterable E and F.

    :param any args: Either a mapping object or an iterable of key-value pairs.'
  signature: 'update(*args: Any, **kwargs: Any) -> None'
- uid: azure.batch.models.VMExtension.values
  name: values
  signature: values() -> ValuesView[Any]
  return:
    description: an object providing a view on D's values
    types:
    - <xref:typing.ValuesView>
attributes:
- uid: azure.batch.models.VMExtension.auto_upgrade_minor_version
  name: auto_upgrade_minor_version
  summary: 'Indicates whether the extension should use a newer minor version if one
    is available at

    deployment time. Once deployed, however, the extension will not upgrade minor
    versions unless

    redeployed, even with this property set to true.'
  signature: 'auto_upgrade_minor_version: bool | None'
- uid: azure.batch.models.VMExtension.enable_automatic_upgrade
  name: enable_automatic_upgrade
  summary: 'Indicates whether the extension should be automatically upgraded by the
    platform if there is a

    newer version of the extension available.'
  signature: 'enable_automatic_upgrade: bool | None'
- uid: azure.batch.models.VMExtension.name
  name: name
  summary: The name of the virtual machine extension. Required.
  signature: 'name: str'
- uid: azure.batch.models.VMExtension.protected_settings
  name: protected_settings
  summary: 'The extension can contain either protectedSettings or protectedSettingsFromKeyVault
    or no

    protected settings at all.'
  signature: 'protected_settings: Dict[str, str] | None'
- uid: azure.batch.models.VMExtension.provision_after_extensions
  name: provision_after_extensions
  summary: 'The collection of extension names. Collection of extension names after
    which this extension

    needs to be provisioned.'
  signature: 'provision_after_extensions: List[str] | None'
- uid: azure.batch.models.VMExtension.publisher
  name: publisher
  summary: The name of the extension handler publisher. Required.
  signature: 'publisher: str'
- uid: azure.batch.models.VMExtension.settings
  name: settings
  summary: JSON formatted public settings for the extension.
  signature: 'settings: Dict[str, str] | None'
- uid: azure.batch.models.VMExtension.type
  name: type
  summary: The type of the extension. Required.
  signature: 'type: str'
- uid: azure.batch.models.VMExtension.type_handler_version
  name: type_handler_version
  summary: The version of script handler.
  signature: 'type_handler_version: str | None'
