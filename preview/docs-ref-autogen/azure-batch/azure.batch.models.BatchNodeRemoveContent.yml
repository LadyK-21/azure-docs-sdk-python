### YamlMime:PythonClass
uid: azure.batch.models.BatchNodeRemoveContent
name: BatchNodeRemoveContent
fullName: azure.batch.models.BatchNodeRemoveContent
module: azure.batch.models
summary: Parameters for removing nodes from an Azure Batch Pool.
constructor:
  syntax: 'BatchNodeRemoveContent(*args: Any, **kwargs: Any)'
variables:
- description: 'A list containing the IDs of the Compute Nodes to be removed from
    the

    specified Pool. A maximum of 100 nodes may be removed per request. Required.'
  name: node_list
  types:
  - <xref:list>[<xref:str>]
- description: 'The timeout for removal of Compute Nodes to the Pool. The default
    value

    is 15 minutes. The minimum value is 5 minutes. If you specify a value less than
    5 minutes, the

    Batch service returns an error; if you are calling the REST API directly, the
    HTTP status code

    is 400 (Bad Request).'
  name: resize_timeout
  types:
  - <xref:datetime.timedelta>
- description: 'Determines what to do with a Compute Node and its running

    task(s) after it has been selected for deallocation. The default value is requeue.
    Known values

    are: "requeue", "terminate", "taskcompletion", and "retaineddata".'
  name: node_deallocation_option
  types:
  - <xref:str>
  - <xref:azure.batch.models.BatchNodeDeallocationOption>
methods:
- uid: azure.batch.models.BatchNodeRemoveContent.as_dict
  name: as_dict
  summary: Return a dict that can be turned into json using json.dump.
  signature: 'as_dict(*, exclude_readonly: bool = False) -> Dict[str, Any]'
  keywordOnlyParameters:
  - name: exclude_readonly
    description: Whether to remove the readonly properties.
    defaultValue: 'False'
    types:
    - <xref:bool>
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
- uid: azure.batch.models.BatchNodeRemoveContent.clear
  name: clear
  summary: Remove all items from D.
  signature: clear() -> None
- uid: azure.batch.models.BatchNodeRemoveContent.copy
  name: copy
  signature: copy() -> Model
- uid: azure.batch.models.BatchNodeRemoveContent.get
  name: get
  summary: 'Get the value for key if key is in the dictionary, else default.

    :param str key: The key to look up.

    :param any default: The value to return if key is not in the dictionary. Defaults
    to None

    :returns: D[k] if k in D, else d.

    :rtype: any'
  signature: 'get(key: str, default: Any = None) -> Any'
  parameters:
  - name: key
    isRequired: true
  - name: default
    defaultValue: None
- uid: azure.batch.models.BatchNodeRemoveContent.items
  name: items
  signature: items() -> ItemsView[str, Any]
  return:
    description: set-like object providing a view on D's items
    types:
    - <xref:typing.ItemsView>
- uid: azure.batch.models.BatchNodeRemoveContent.keys
  name: keys
  signature: keys() -> KeysView[str]
  return:
    description: a set-like object providing a view on D's keys
    types:
    - <xref:typing.KeysView>
- uid: azure.batch.models.BatchNodeRemoveContent.pop
  name: pop
  summary: 'Removes specified key and return the corresponding value.

    :param str key: The key to pop.

    :param any default: The value to return if key is not in the dictionary

    :returns: The value corresponding to the key.

    :rtype: any

    :raises KeyError: If key is not found and default is not given.'
  signature: 'pop(key: str, default: ~typing.Any = <object object>) -> Any'
  parameters:
  - name: key
    isRequired: true
  - name: default
- uid: azure.batch.models.BatchNodeRemoveContent.popitem
  name: popitem
  summary: 'Removes and returns some (key, value) pair

    :returns: The (key, value) pair.

    :rtype: tuple

    :raises KeyError: if D is empty.'
  signature: popitem() -> Tuple[str, Any]
- uid: azure.batch.models.BatchNodeRemoveContent.setdefault
  name: setdefault
  summary: 'Same as calling D.get(k, d), and setting D[k]=d if k not found

    :param str key: The key to look up.

    :param any default: The value to set if key is not in the dictionary

    :returns: D[k] if k in D, else d.

    :rtype: any'
  signature: 'setdefault(key: str, default: ~typing.Any = <object object>) -> Any'
  parameters:
  - name: key
    isRequired: true
  - name: default
- uid: azure.batch.models.BatchNodeRemoveContent.update
  name: update
  summary: 'Updates D from mapping/iterable E and F.

    :param any args: Either a mapping object or an iterable of key-value pairs.'
  signature: 'update(*args: Any, **kwargs: Any) -> None'
- uid: azure.batch.models.BatchNodeRemoveContent.values
  name: values
  signature: values() -> ValuesView[Any]
  return:
    description: an object providing a view on D's values
    types:
    - <xref:typing.ValuesView>
attributes:
- uid: azure.batch.models.BatchNodeRemoveContent.node_deallocation_option
  name: node_deallocation_option
  summary: 'Determines what to do with a Compute Node and its running task(s) after
    it has been selected

    for deallocation. The default value is requeue. Known values are: "requeue", "terminate",

    "taskcompletion", and "retaineddata".'
  signature: 'node_deallocation_option: str | _models.BatchNodeDeallocationOption
    | None'
- uid: azure.batch.models.BatchNodeRemoveContent.node_list
  name: node_list
  summary: 'A list containing the IDs of the Compute Nodes to be removed from the
    specified Pool. A maximum

    of 100 nodes may be removed per request. Required.'
  signature: 'node_list: List[str]'
- uid: azure.batch.models.BatchNodeRemoveContent.resize_timeout
  name: resize_timeout
  summary: 'The timeout for removal of Compute Nodes to the Pool. The default value
    is 15 minutes. The

    minimum value is 5 minutes. If you specify a value less than 5 minutes, the Batch
    service

    returns an error; if you are calling the REST API directly, the HTTP status code
    is 400 (Bad

    Request).'
  signature: 'resize_timeout: timedelta | None'
