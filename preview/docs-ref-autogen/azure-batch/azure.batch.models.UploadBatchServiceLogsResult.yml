### YamlMime:PythonClass
uid: azure.batch.models.UploadBatchServiceLogsResult
name: UploadBatchServiceLogsResult
fullName: azure.batch.models.UploadBatchServiceLogsResult
module: azure.batch.models
summary: The result of uploading Batch service log files from a specific Compute Node.
constructor:
  syntax: 'UploadBatchServiceLogsResult(*args: Any, **kwargs: Any)'
variables:
- description: 'The virtual directory within Azure Blob Storage container to

    which the Batch Service log file(s) will be uploaded. The virtual directory name
    is part of the

    blob name for each log file uploaded, and it is built based poolId, nodeId and
    a unique

    identifier. Required.'
  name: virtual_directory_name
  types:
  - <xref:str>
- description: The number of log files which will be uploaded. Required.
  name: number_of_files_uploaded
  types:
  - <xref:int>
methods:
- uid: azure.batch.models.UploadBatchServiceLogsResult.as_dict
  name: as_dict
  summary: Return a dict that can be turned into json using json.dump.
  signature: 'as_dict(*, exclude_readonly: bool = False) -> Dict[str, Any]'
  keywordOnlyParameters:
  - name: exclude_readonly
    description: Whether to remove the readonly properties.
    defaultValue: 'False'
    types:
    - <xref:bool>
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
- uid: azure.batch.models.UploadBatchServiceLogsResult.clear
  name: clear
  summary: Remove all items from D.
  signature: clear() -> None
- uid: azure.batch.models.UploadBatchServiceLogsResult.copy
  name: copy
  signature: copy() -> Model
- uid: azure.batch.models.UploadBatchServiceLogsResult.get
  name: get
  summary: 'Get the value for key if key is in the dictionary, else default.

    :param str key: The key to look up.

    :param any default: The value to return if key is not in the dictionary. Defaults
    to None

    :returns: D[k] if k in D, else d.

    :rtype: any'
  signature: 'get(key: str, default: Any = None) -> Any'
  parameters:
  - name: key
    isRequired: true
  - name: default
    defaultValue: None
- uid: azure.batch.models.UploadBatchServiceLogsResult.items
  name: items
  signature: items() -> ItemsView[str, Any]
  return:
    description: set-like object providing a view on D's items
    types:
    - <xref:typing.ItemsView>
- uid: azure.batch.models.UploadBatchServiceLogsResult.keys
  name: keys
  signature: keys() -> KeysView[str]
  return:
    description: a set-like object providing a view on D's keys
    types:
    - <xref:typing.KeysView>
- uid: azure.batch.models.UploadBatchServiceLogsResult.pop
  name: pop
  summary: 'Removes specified key and return the corresponding value.

    :param str key: The key to pop.

    :param any default: The value to return if key is not in the dictionary

    :returns: The value corresponding to the key.

    :rtype: any

    :raises KeyError: If key is not found and default is not given.'
  signature: 'pop(key: str, default: ~typing.Any = <object object>) -> Any'
  parameters:
  - name: key
    isRequired: true
  - name: default
- uid: azure.batch.models.UploadBatchServiceLogsResult.popitem
  name: popitem
  summary: 'Removes and returns some (key, value) pair

    :returns: The (key, value) pair.

    :rtype: tuple

    :raises KeyError: if D is empty.'
  signature: popitem() -> Tuple[str, Any]
- uid: azure.batch.models.UploadBatchServiceLogsResult.setdefault
  name: setdefault
  summary: 'Same as calling D.get(k, d), and setting D[k]=d if k not found

    :param str key: The key to look up.

    :param any default: The value to set if key is not in the dictionary

    :returns: D[k] if k in D, else d.

    :rtype: any'
  signature: 'setdefault(key: str, default: ~typing.Any = <object object>) -> Any'
  parameters:
  - name: key
    isRequired: true
  - name: default
- uid: azure.batch.models.UploadBatchServiceLogsResult.update
  name: update
  summary: 'Updates D from mapping/iterable E and F.

    :param any args: Either a mapping object or an iterable of key-value pairs.'
  signature: 'update(*args: Any, **kwargs: Any) -> None'
- uid: azure.batch.models.UploadBatchServiceLogsResult.values
  name: values
  signature: values() -> ValuesView[Any]
  return:
    description: an object providing a view on D's values
    types:
    - <xref:typing.ValuesView>
attributes:
- uid: azure.batch.models.UploadBatchServiceLogsResult.number_of_files_uploaded
  name: number_of_files_uploaded
  summary: The number of log files which will be uploaded. Required.
  signature: 'number_of_files_uploaded: int'
- uid: azure.batch.models.UploadBatchServiceLogsResult.virtual_directory_name
  name: virtual_directory_name
  summary: 'The virtual directory within Azure Blob Storage container to which the
    Batch Service log

    file(s) will be uploaded. The virtual directory name is part of the blob name
    for each log file

    uploaded, and it is built based poolId, nodeId and a unique identifier. Required.'
  signature: 'virtual_directory_name: str'
