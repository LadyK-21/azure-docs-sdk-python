### YamlMime:PythonClass
uid: azure.batch.models.ContainerHostBatchBindMountEntry
name: ContainerHostBatchBindMountEntry
fullName: azure.batch.models.ContainerHostBatchBindMountEntry
module: azure.batch.models
summary: The entry of path and mount mode you want to mount into task container.
constructor:
  syntax: 'ContainerHostBatchBindMountEntry(*args: Any, **kwargs: Any)'
variables:
- description: 'The path which be mounted to container customer can select. Known
    values are:

    "Shared", "Startup", "VfsMounts", "Task", "JobPrep", and "Applications".'
  name: source
  types:
  - <xref:str>
  - <xref:azure.batch.models.ContainerHostDataPath>
- description: 'Mount this source path as read-only mode or not. Default value is
    false

    (read/write mode). For Linux, if you mount this path as a read/write mode, this
    does not mean

    that all users in container have the read/write access for the path, it depends
    on the access

    in host VM. If this path is mounted read-only, all users within the container
    will not be able

    to modify the path.'
  name: is_read_only
  types:
  - <xref:bool>
methods:
- uid: azure.batch.models.ContainerHostBatchBindMountEntry.as_dict
  name: as_dict
  summary: Return a dict that can be turned into json using json.dump.
  signature: 'as_dict(*, exclude_readonly: bool = False) -> Dict[str, Any]'
  keywordOnlyParameters:
  - name: exclude_readonly
    description: Whether to remove the readonly properties.
    defaultValue: 'False'
    types:
    - <xref:bool>
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
- uid: azure.batch.models.ContainerHostBatchBindMountEntry.clear
  name: clear
  summary: Remove all items from D.
  signature: clear() -> None
- uid: azure.batch.models.ContainerHostBatchBindMountEntry.copy
  name: copy
  signature: copy() -> Model
- uid: azure.batch.models.ContainerHostBatchBindMountEntry.get
  name: get
  summary: 'Get the value for key if key is in the dictionary, else default.

    :param str key: The key to look up.

    :param any default: The value to return if key is not in the dictionary. Defaults
    to None

    :returns: D[k] if k in D, else d.

    :rtype: any'
  signature: 'get(key: str, default: Any = None) -> Any'
  parameters:
  - name: key
    isRequired: true
  - name: default
    defaultValue: None
- uid: azure.batch.models.ContainerHostBatchBindMountEntry.items
  name: items
  signature: items() -> ItemsView[str, Any]
  return:
    description: set-like object providing a view on D's items
    types:
    - <xref:typing.ItemsView>
- uid: azure.batch.models.ContainerHostBatchBindMountEntry.keys
  name: keys
  signature: keys() -> KeysView[str]
  return:
    description: a set-like object providing a view on D's keys
    types:
    - <xref:typing.KeysView>
- uid: azure.batch.models.ContainerHostBatchBindMountEntry.pop
  name: pop
  summary: 'Removes specified key and return the corresponding value.

    :param str key: The key to pop.

    :param any default: The value to return if key is not in the dictionary

    :returns: The value corresponding to the key.

    :rtype: any

    :raises KeyError: If key is not found and default is not given.'
  signature: 'pop(key: str, default: ~typing.Any = <object object>) -> Any'
  parameters:
  - name: key
    isRequired: true
  - name: default
- uid: azure.batch.models.ContainerHostBatchBindMountEntry.popitem
  name: popitem
  summary: 'Removes and returns some (key, value) pair

    :returns: The (key, value) pair.

    :rtype: tuple

    :raises KeyError: if D is empty.'
  signature: popitem() -> Tuple[str, Any]
- uid: azure.batch.models.ContainerHostBatchBindMountEntry.setdefault
  name: setdefault
  summary: 'Same as calling D.get(k, d), and setting D[k]=d if k not found

    :param str key: The key to look up.

    :param any default: The value to set if key is not in the dictionary

    :returns: D[k] if k in D, else d.

    :rtype: any'
  signature: 'setdefault(key: str, default: ~typing.Any = <object object>) -> Any'
  parameters:
  - name: key
    isRequired: true
  - name: default
- uid: azure.batch.models.ContainerHostBatchBindMountEntry.update
  name: update
  summary: 'Updates D from mapping/iterable E and F.

    :param any args: Either a mapping object or an iterable of key-value pairs.'
  signature: 'update(*args: Any, **kwargs: Any) -> None'
- uid: azure.batch.models.ContainerHostBatchBindMountEntry.values
  name: values
  signature: values() -> ValuesView[Any]
  return:
    description: an object providing a view on D's values
    types:
    - <xref:typing.ValuesView>
attributes:
- uid: azure.batch.models.ContainerHostBatchBindMountEntry.is_read_only
  name: is_read_only
  summary: 'Mount this source path as read-only mode or not. Default value is false
    (read/write mode). For

    Linux, if you mount this path as a read/write mode, this does not mean that all
    users in

    container have the read/write access for the path, it depends on the access in
    host VM. If this

    path is mounted read-only, all users within the container will not be able to
    modify the path.'
  signature: 'is_read_only: bool | None'
- uid: azure.batch.models.ContainerHostBatchBindMountEntry.source
  name: source
  summary: '"Shared",

    "Startup", "VfsMounts", "Task", "JobPrep", and "Applications".'
  signature: 'source: str | _models.ContainerHostDataPath | None'
