### YamlMime:PythonClass
uid: azure.batch.models.BatchJobConstraints
name: BatchJobConstraints
fullName: azure.batch.models.BatchJobConstraints
module: azure.batch.models
summary: The execution constraints for a Job.
constructor:
  syntax: 'BatchJobConstraints(*args: Any, **kwargs: Any)'
variables:
- description: 'The maximum elapsed time that the Job may run, measured from the

    time the Job is created. If the Job does not complete within the time limit, the
    Batch service

    terminates it and any Tasks that are still running. In this case, the termination
    reason will

    be MaxWallClockTimeExpiry. If this property is not specified, there is no time
    limit on how

    long the Job may run.'
  name: max_wall_clock_time
  types:
  - <xref:datetime.timedelta>
- description: 'The maximum number of times each Task may be retried. The Batch

    service retries a Task if its exit code is nonzero. Note that this value specifically
    controls

    the number of retries. The Batch service will try each Task once, and may then
    retry up to this

    limit. For example, if the maximum retry count is 3, Batch tries a Task up to
    4 times (one

    initial try and 3 retries). If the maximum retry count is 0, the Batch service
    does not retry

    Tasks. If the maximum retry count is -1, the Batch service retries Tasks without
    limit. The

    default value is 0 (no retries).'
  name: max_task_retry_count
  types:
  - <xref:int>
methods:
- uid: azure.batch.models.BatchJobConstraints.as_dict
  name: as_dict
  summary: Return a dict that can be turned into json using json.dump.
  signature: 'as_dict(*, exclude_readonly: bool = False) -> Dict[str, Any]'
  keywordOnlyParameters:
  - name: exclude_readonly
    description: Whether to remove the readonly properties.
    defaultValue: 'False'
    types:
    - <xref:bool>
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
- uid: azure.batch.models.BatchJobConstraints.clear
  name: clear
  summary: Remove all items from D.
  signature: clear() -> None
- uid: azure.batch.models.BatchJobConstraints.copy
  name: copy
  signature: copy() -> Model
- uid: azure.batch.models.BatchJobConstraints.get
  name: get
  summary: 'Get the value for key if key is in the dictionary, else default.

    :param str key: The key to look up.

    :param any default: The value to return if key is not in the dictionary. Defaults
    to None

    :returns: D[k] if k in D, else d.

    :rtype: any'
  signature: 'get(key: str, default: Any = None) -> Any'
  parameters:
  - name: key
    isRequired: true
  - name: default
    defaultValue: None
- uid: azure.batch.models.BatchJobConstraints.items
  name: items
  signature: items() -> ItemsView[str, Any]
  return:
    description: set-like object providing a view on D's items
    types:
    - <xref:typing.ItemsView>
- uid: azure.batch.models.BatchJobConstraints.keys
  name: keys
  signature: keys() -> KeysView[str]
  return:
    description: a set-like object providing a view on D's keys
    types:
    - <xref:typing.KeysView>
- uid: azure.batch.models.BatchJobConstraints.pop
  name: pop
  summary: 'Removes specified key and return the corresponding value.

    :param str key: The key to pop.

    :param any default: The value to return if key is not in the dictionary

    :returns: The value corresponding to the key.

    :rtype: any

    :raises KeyError: If key is not found and default is not given.'
  signature: 'pop(key: str, default: ~typing.Any = <object object>) -> Any'
  parameters:
  - name: key
    isRequired: true
  - name: default
- uid: azure.batch.models.BatchJobConstraints.popitem
  name: popitem
  summary: 'Removes and returns some (key, value) pair

    :returns: The (key, value) pair.

    :rtype: tuple

    :raises KeyError: if D is empty.'
  signature: popitem() -> Tuple[str, Any]
- uid: azure.batch.models.BatchJobConstraints.setdefault
  name: setdefault
  summary: 'Same as calling D.get(k, d), and setting D[k]=d if k not found

    :param str key: The key to look up.

    :param any default: The value to set if key is not in the dictionary

    :returns: D[k] if k in D, else d.

    :rtype: any'
  signature: 'setdefault(key: str, default: ~typing.Any = <object object>) -> Any'
  parameters:
  - name: key
    isRequired: true
  - name: default
- uid: azure.batch.models.BatchJobConstraints.update
  name: update
  summary: 'Updates D from mapping/iterable E and F.

    :param any args: Either a mapping object or an iterable of key-value pairs.'
  signature: 'update(*args: Any, **kwargs: Any) -> None'
- uid: azure.batch.models.BatchJobConstraints.values
  name: values
  signature: values() -> ValuesView[Any]
  return:
    description: an object providing a view on D's values
    types:
    - <xref:typing.ValuesView>
attributes:
- uid: azure.batch.models.BatchJobConstraints.max_task_retry_count
  name: max_task_retry_count
  summary: 'The maximum number of times each Task may be retried. The Batch service
    retries a Task if its

    exit code is nonzero. Note that this value specifically controls the number of
    retries. The

    Batch service will try each Task once, and may then retry up to this limit. For
    example, if the

    maximum retry count is 3, Batch tries a Task up to 4 times (one initial try and
    3 retries). If

    the maximum retry count is 0, the Batch service does not retry Tasks. If the maximum
    retry

    count is -1, the Batch service retries Tasks without limit. The default value
    is 0 (no

    retries).'
  signature: 'max_task_retry_count: int | None'
- uid: azure.batch.models.BatchJobConstraints.max_wall_clock_time
  name: max_wall_clock_time
  summary: 'The maximum elapsed time that the Job may run, measured from the time
    the Job is created. If

    the Job does not complete within the time limit, the Batch service terminates
    it and any Tasks

    that are still running. In this case, the termination reason will be MaxWallClockTimeExpiry.
    If

    this property is not specified, there is no time limit on how long the Job may
    run.'
  signature: 'max_wall_clock_time: timedelta | None'
