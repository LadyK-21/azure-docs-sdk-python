### YamlMime:PythonClass
uid: azure.batch.models.AutoUserSpecification
name: AutoUserSpecification
fullName: azure.batch.models.AutoUserSpecification
module: azure.batch.models
summary: Specifies the options for the auto user that runs an Azure Batch Task.
constructor:
  syntax: 'AutoUserSpecification(*args: Any, **kwargs: Any)'
variables:
- description: 'The scope for the auto user. The default value is pool. If the pool
    is running

    Windows a value of Task should be specified if stricter isolation between tasks
    is required.

    For example, if the task mutates the registry in a way which could impact other
    tasks, or if

    certificates have been specified on the pool which should not be accessible by
    normal tasks but

    should be accessible by StartTasks. Known values are: "task" and "pool".'
  name: scope
  types:
  - <xref:str>
  - <xref:azure.batch.models.AutoUserScope>
- description: 'The elevation level of the auto user. The default value is nonAdmin.

    Known values are: "nonadmin" and "admin".'
  name: elevation_level
  types:
  - <xref:str>
  - <xref:azure.batch.models.ElevationLevel>
methods:
- uid: azure.batch.models.AutoUserSpecification.as_dict
  name: as_dict
  summary: Return a dict that can be turned into json using json.dump.
  signature: 'as_dict(*, exclude_readonly: bool = False) -> Dict[str, Any]'
  keywordOnlyParameters:
  - name: exclude_readonly
    description: Whether to remove the readonly properties.
    defaultValue: 'False'
    types:
    - <xref:bool>
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
- uid: azure.batch.models.AutoUserSpecification.clear
  name: clear
  summary: Remove all items from D.
  signature: clear() -> None
- uid: azure.batch.models.AutoUserSpecification.copy
  name: copy
  signature: copy() -> Model
- uid: azure.batch.models.AutoUserSpecification.get
  name: get
  summary: 'Get the value for key if key is in the dictionary, else default.

    :param str key: The key to look up.

    :param any default: The value to return if key is not in the dictionary. Defaults
    to None

    :returns: D[k] if k in D, else d.

    :rtype: any'
  signature: 'get(key: str, default: Any = None) -> Any'
  parameters:
  - name: key
    isRequired: true
  - name: default
    defaultValue: None
- uid: azure.batch.models.AutoUserSpecification.items
  name: items
  signature: items() -> ItemsView[str, Any]
  return:
    description: set-like object providing a view on D's items
    types:
    - <xref:typing.ItemsView>
- uid: azure.batch.models.AutoUserSpecification.keys
  name: keys
  signature: keys() -> KeysView[str]
  return:
    description: a set-like object providing a view on D's keys
    types:
    - <xref:typing.KeysView>
- uid: azure.batch.models.AutoUserSpecification.pop
  name: pop
  summary: 'Removes specified key and return the corresponding value.

    :param str key: The key to pop.

    :param any default: The value to return if key is not in the dictionary

    :returns: The value corresponding to the key.

    :rtype: any

    :raises KeyError: If key is not found and default is not given.'
  signature: 'pop(key: str, default: ~typing.Any = <object object>) -> Any'
  parameters:
  - name: key
    isRequired: true
  - name: default
- uid: azure.batch.models.AutoUserSpecification.popitem
  name: popitem
  summary: 'Removes and returns some (key, value) pair

    :returns: The (key, value) pair.

    :rtype: tuple

    :raises KeyError: if D is empty.'
  signature: popitem() -> Tuple[str, Any]
- uid: azure.batch.models.AutoUserSpecification.setdefault
  name: setdefault
  summary: 'Same as calling D.get(k, d), and setting D[k]=d if k not found

    :param str key: The key to look up.

    :param any default: The value to set if key is not in the dictionary

    :returns: D[k] if k in D, else d.

    :rtype: any'
  signature: 'setdefault(key: str, default: ~typing.Any = <object object>) -> Any'
  parameters:
  - name: key
    isRequired: true
  - name: default
- uid: azure.batch.models.AutoUserSpecification.update
  name: update
  summary: 'Updates D from mapping/iterable E and F.

    :param any args: Either a mapping object or an iterable of key-value pairs.'
  signature: 'update(*args: Any, **kwargs: Any) -> None'
- uid: azure.batch.models.AutoUserSpecification.values
  name: values
  signature: values() -> ValuesView[Any]
  return:
    description: an object providing a view on D's values
    types:
    - <xref:typing.ValuesView>
attributes:
- uid: azure.batch.models.AutoUserSpecification.elevation_level
  name: elevation_level
  summary: 'The elevation level of the auto user. The default value is nonAdmin. Known
    values are:

    "nonadmin" and "admin".'
  signature: 'elevation_level: str | _models.ElevationLevel | None'
- uid: azure.batch.models.AutoUserSpecification.scope
  name: scope
  summary: 'The scope for the auto user. The default value is pool. If the pool is
    running Windows a value

    of Task should be specified if stricter isolation between tasks is required. For
    example, if

    the task mutates the registry in a way which could impact other tasks, or if certificates
    have

    been specified on the pool which should not be accessible by normal tasks but
    should be

    accessible by StartTasks. Known values are: "task" and "pool".'
  signature: 'scope: str | _models.AutoUserScope | None'
