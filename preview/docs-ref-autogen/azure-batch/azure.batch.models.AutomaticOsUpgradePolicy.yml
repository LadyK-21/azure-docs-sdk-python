### YamlMime:PythonClass
uid: azure.batch.models.AutomaticOsUpgradePolicy
name: AutomaticOsUpgradePolicy
fullName: azure.batch.models.AutomaticOsUpgradePolicy
module: azure.batch.models
summary: The configuration parameters used for performing automatic OS upgrade.
constructor:
  syntax: 'AutomaticOsUpgradePolicy(*args: Any, **kwargs: Any)'
variables:
- description: Whether OS image rollback feature should be disabled.
  name: disable_automatic_rollback
  types:
  - <xref:bool>
- description: 'Indicates whether OS upgrades should automatically be

    applied to scale set instances in a rolling fashion when a newer version of the
    OS image

    becomes available. <br /><br /> If this is set to true for Windows based pools,

    [WindowsConfiguration.enableAutomaticUpdates](https://learn.microsoft.com/rest/api/batchservice/pool/add?tabs=HTTP#windowsconfiguration)

    cannot be set to true.'
  name: enable_automatic_os_upgrade
  types:
  - <xref:bool>
- description: 'Indicates whether rolling upgrade policy should be used

    during Auto OS Upgrade. Auto OS Upgrade will fallback to the default policy if
    no policy is

    defined on the VMSS.'
  name: use_rolling_upgrade_policy
  types:
  - <xref:bool>
- description: Defer OS upgrades on the TVMs if they are running tasks.
  name: os_rolling_upgrade_deferral
  types:
  - <xref:bool>
methods:
- uid: azure.batch.models.AutomaticOsUpgradePolicy.as_dict
  name: as_dict
  summary: Return a dict that can be turned into json using json.dump.
  signature: 'as_dict(*, exclude_readonly: bool = False) -> Dict[str, Any]'
  keywordOnlyParameters:
  - name: exclude_readonly
    description: Whether to remove the readonly properties.
    defaultValue: 'False'
    types:
    - <xref:bool>
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
- uid: azure.batch.models.AutomaticOsUpgradePolicy.clear
  name: clear
  summary: Remove all items from D.
  signature: clear() -> None
- uid: azure.batch.models.AutomaticOsUpgradePolicy.copy
  name: copy
  signature: copy() -> Model
- uid: azure.batch.models.AutomaticOsUpgradePolicy.get
  name: get
  summary: 'Get the value for key if key is in the dictionary, else default.

    :param str key: The key to look up.

    :param any default: The value to return if key is not in the dictionary. Defaults
    to None

    :returns: D[k] if k in D, else d.

    :rtype: any'
  signature: 'get(key: str, default: Any = None) -> Any'
  parameters:
  - name: key
    isRequired: true
  - name: default
    defaultValue: None
- uid: azure.batch.models.AutomaticOsUpgradePolicy.items
  name: items
  signature: items() -> ItemsView[str, Any]
  return:
    description: set-like object providing a view on D's items
    types:
    - <xref:typing.ItemsView>
- uid: azure.batch.models.AutomaticOsUpgradePolicy.keys
  name: keys
  signature: keys() -> KeysView[str]
  return:
    description: a set-like object providing a view on D's keys
    types:
    - <xref:typing.KeysView>
- uid: azure.batch.models.AutomaticOsUpgradePolicy.pop
  name: pop
  summary: 'Removes specified key and return the corresponding value.

    :param str key: The key to pop.

    :param any default: The value to return if key is not in the dictionary

    :returns: The value corresponding to the key.

    :rtype: any

    :raises KeyError: If key is not found and default is not given.'
  signature: 'pop(key: str, default: ~typing.Any = <object object>) -> Any'
  parameters:
  - name: key
    isRequired: true
  - name: default
- uid: azure.batch.models.AutomaticOsUpgradePolicy.popitem
  name: popitem
  summary: 'Removes and returns some (key, value) pair

    :returns: The (key, value) pair.

    :rtype: tuple

    :raises KeyError: if D is empty.'
  signature: popitem() -> Tuple[str, Any]
- uid: azure.batch.models.AutomaticOsUpgradePolicy.setdefault
  name: setdefault
  summary: 'Same as calling D.get(k, d), and setting D[k]=d if k not found

    :param str key: The key to look up.

    :param any default: The value to set if key is not in the dictionary

    :returns: D[k] if k in D, else d.

    :rtype: any'
  signature: 'setdefault(key: str, default: ~typing.Any = <object object>) -> Any'
  parameters:
  - name: key
    isRequired: true
  - name: default
- uid: azure.batch.models.AutomaticOsUpgradePolicy.update
  name: update
  summary: 'Updates D from mapping/iterable E and F.

    :param any args: Either a mapping object or an iterable of key-value pairs.'
  signature: 'update(*args: Any, **kwargs: Any) -> None'
- uid: azure.batch.models.AutomaticOsUpgradePolicy.values
  name: values
  signature: values() -> ValuesView[Any]
  return:
    description: an object providing a view on D's values
    types:
    - <xref:typing.ValuesView>
attributes:
- uid: azure.batch.models.AutomaticOsUpgradePolicy.disable_automatic_rollback
  name: disable_automatic_rollback
  summary: Whether OS image rollback feature should be disabled.
  signature: 'disable_automatic_rollback: bool | None'
- uid: azure.batch.models.AutomaticOsUpgradePolicy.enable_automatic_os_upgrade
  name: enable_automatic_os_upgrade
  summary: 'Indicates whether OS upgrades should automatically be applied to scale
    set instances in a

    rolling fashion when a newer version of the OS image becomes available. <br /><br
    /> If this is

    set to true for Windows based pools, [WindowsConfiguration.enableAutomaticUpdates](https://learn.microsoft.com/rest/api/batchservice/pool/add?tabs=HTTP#windowsconfiguration)

    cannot be set to true.'
  signature: 'enable_automatic_os_upgrade: bool | None'
- uid: azure.batch.models.AutomaticOsUpgradePolicy.os_rolling_upgrade_deferral
  name: os_rolling_upgrade_deferral
  summary: Defer OS upgrades on the TVMs if they are running tasks.
  signature: 'os_rolling_upgrade_deferral: bool | None'
- uid: azure.batch.models.AutomaticOsUpgradePolicy.use_rolling_upgrade_policy
  name: use_rolling_upgrade_policy
  summary: 'Indicates whether rolling upgrade policy should be used during Auto OS
    Upgrade. Auto OS Upgrade

    will fallback to the default policy if no policy is defined on the VMSS.'
  signature: 'use_rolling_upgrade_policy: bool | None'
