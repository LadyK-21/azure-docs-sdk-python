### YamlMime:PythonClass
uid: azure.batch.models.BatchTaskAddResult
name: BatchTaskAddResult
fullName: azure.batch.models.BatchTaskAddResult
module: azure.batch.models
summary: Result for a single Task added as part of an add Task collection operation.
constructor:
  syntax: 'BatchTaskAddResult(*args: Any, **kwargs: Any)'
variables:
- description: 'The status of the add Task request. Required. Known values are: "success",

    "clienterror", and "servererror".'
  name: status
  types:
  - <xref:str>
  - <xref:azure.batch.models.BatchTaskAddStatus>
- description: The ID of the Task for which this is the result. Required.
  name: task_id
  types:
  - <xref:str>
- description: 'The ETag of the Task, if the Task was successfully added. You can
    use this to

    detect whether the Task has changed between requests. In particular, you can be
    pass the ETag

    with an Update Task request to specify that your changes should take effect only
    if nobody else

    has modified the Job in the meantime.'
  name: e_tag
  types:
  - <xref:str>
- description: The last modified time of the Task.
  name: last_modified
  types:
  - <xref:datetime.datetime>
- description: The URL of the Task, if the Task was successfully added.
  name: location
  types:
  - <xref:str>
- description: The error encountered while attempting to add the Task.
  name: error
  types:
  - <xref:azure.batch.models.BatchError>
methods:
- uid: azure.batch.models.BatchTaskAddResult.as_dict
  name: as_dict
  summary: Return a dict that can be turned into json using json.dump.
  signature: 'as_dict(*, exclude_readonly: bool = False) -> Dict[str, Any]'
  keywordOnlyParameters:
  - name: exclude_readonly
    description: Whether to remove the readonly properties.
    defaultValue: 'False'
    types:
    - <xref:bool>
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
- uid: azure.batch.models.BatchTaskAddResult.clear
  name: clear
  summary: Remove all items from D.
  signature: clear() -> None
- uid: azure.batch.models.BatchTaskAddResult.copy
  name: copy
  signature: copy() -> Model
- uid: azure.batch.models.BatchTaskAddResult.get
  name: get
  summary: 'Get the value for key if key is in the dictionary, else default.

    :param str key: The key to look up.

    :param any default: The value to return if key is not in the dictionary. Defaults
    to None

    :returns: D[k] if k in D, else d.

    :rtype: any'
  signature: 'get(key: str, default: Any = None) -> Any'
  parameters:
  - name: key
    isRequired: true
  - name: default
    defaultValue: None
- uid: azure.batch.models.BatchTaskAddResult.items
  name: items
  signature: items() -> ItemsView[str, Any]
  return:
    description: set-like object providing a view on D's items
    types:
    - <xref:typing.ItemsView>
- uid: azure.batch.models.BatchTaskAddResult.keys
  name: keys
  signature: keys() -> KeysView[str]
  return:
    description: a set-like object providing a view on D's keys
    types:
    - <xref:typing.KeysView>
- uid: azure.batch.models.BatchTaskAddResult.pop
  name: pop
  summary: 'Removes specified key and return the corresponding value.

    :param str key: The key to pop.

    :param any default: The value to return if key is not in the dictionary

    :returns: The value corresponding to the key.

    :rtype: any

    :raises KeyError: If key is not found and default is not given.'
  signature: 'pop(key: str, default: ~typing.Any = <object object>) -> Any'
  parameters:
  - name: key
    isRequired: true
  - name: default
- uid: azure.batch.models.BatchTaskAddResult.popitem
  name: popitem
  summary: 'Removes and returns some (key, value) pair

    :returns: The (key, value) pair.

    :rtype: tuple

    :raises KeyError: if D is empty.'
  signature: popitem() -> Tuple[str, Any]
- uid: azure.batch.models.BatchTaskAddResult.setdefault
  name: setdefault
  summary: 'Same as calling D.get(k, d), and setting D[k]=d if k not found

    :param str key: The key to look up.

    :param any default: The value to set if key is not in the dictionary

    :returns: D[k] if k in D, else d.

    :rtype: any'
  signature: 'setdefault(key: str, default: ~typing.Any = <object object>) -> Any'
  parameters:
  - name: key
    isRequired: true
  - name: default
- uid: azure.batch.models.BatchTaskAddResult.update
  name: update
  summary: 'Updates D from mapping/iterable E and F.

    :param any args: Either a mapping object or an iterable of key-value pairs.'
  signature: 'update(*args: Any, **kwargs: Any) -> None'
- uid: azure.batch.models.BatchTaskAddResult.values
  name: values
  signature: values() -> ValuesView[Any]
  return:
    description: an object providing a view on D's values
    types:
    - <xref:typing.ValuesView>
attributes:
- uid: azure.batch.models.BatchTaskAddResult.e_tag
  name: e_tag
  summary: 'The ETag of the Task, if the Task was successfully added. You can use
    this to detect whether

    the Task has changed between requests. In particular, you can be pass the ETag
    with an Update

    Task request to specify that your changes should take effect only if nobody else
    has modified

    the Job in the meantime.'
  signature: 'e_tag: str | None'
- uid: azure.batch.models.BatchTaskAddResult.error
  name: error
  summary: The error encountered while attempting to add the Task.
  signature: 'error: _models.BatchError | None'
- uid: azure.batch.models.BatchTaskAddResult.last_modified
  name: last_modified
  summary: The last modified time of the Task.
  signature: 'last_modified: datetime | None'
- uid: azure.batch.models.BatchTaskAddResult.location
  name: location
  summary: The URL of the Task, if the Task was successfully added.
  signature: 'location: str | None'
- uid: azure.batch.models.BatchTaskAddResult.status
  name: status
  summary: '"success", "clienterror",

    and "servererror".'
  signature: 'status: str | _models.BatchTaskAddStatus'
- uid: azure.batch.models.BatchTaskAddResult.task_id
  name: task_id
  summary: The ID of the Task for which this is the result. Required.
  signature: 'task_id: str'
