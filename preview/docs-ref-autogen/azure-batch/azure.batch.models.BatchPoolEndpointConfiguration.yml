### YamlMime:PythonClass
uid: azure.batch.models.BatchPoolEndpointConfiguration
name: BatchPoolEndpointConfiguration
fullName: azure.batch.models.BatchPoolEndpointConfiguration
module: azure.batch.models
summary: The endpoint configuration for a Pool.
constructor:
  syntax: 'BatchPoolEndpointConfiguration(*args: Any, **kwargs: Any)'
variables:
- description: 'A list of inbound NAT Pools that can be used to address specific ports

    on an individual Compute Node externally. The maximum number of inbound NAT Pools
    per Batch

    Pool is 5. If the maximum number of inbound NAT Pools is exceeded the request
    fails with HTTP

    status code 400. This cannot be specified if the IPAddressProvisioningType is

    NoPublicIPAddresses. Required.'
  name: inbound_nat_pools
  types:
  - <xref:list>[<xref:azure.batch.models.InboundNatPool>]
methods:
- uid: azure.batch.models.BatchPoolEndpointConfiguration.as_dict
  name: as_dict
  summary: Return a dict that can be turned into json using json.dump.
  signature: 'as_dict(*, exclude_readonly: bool = False) -> Dict[str, Any]'
  keywordOnlyParameters:
  - name: exclude_readonly
    description: Whether to remove the readonly properties.
    defaultValue: 'False'
    types:
    - <xref:bool>
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
- uid: azure.batch.models.BatchPoolEndpointConfiguration.clear
  name: clear
  summary: Remove all items from D.
  signature: clear() -> None
- uid: azure.batch.models.BatchPoolEndpointConfiguration.copy
  name: copy
  signature: copy() -> Model
- uid: azure.batch.models.BatchPoolEndpointConfiguration.get
  name: get
  summary: 'Get the value for key if key is in the dictionary, else default.

    :param str key: The key to look up.

    :param any default: The value to return if key is not in the dictionary. Defaults
    to None

    :returns: D[k] if k in D, else d.

    :rtype: any'
  signature: 'get(key: str, default: Any = None) -> Any'
  parameters:
  - name: key
    isRequired: true
  - name: default
    defaultValue: None
- uid: azure.batch.models.BatchPoolEndpointConfiguration.items
  name: items
  signature: items() -> ItemsView[str, Any]
  return:
    description: set-like object providing a view on D's items
    types:
    - <xref:typing.ItemsView>
- uid: azure.batch.models.BatchPoolEndpointConfiguration.keys
  name: keys
  signature: keys() -> KeysView[str]
  return:
    description: a set-like object providing a view on D's keys
    types:
    - <xref:typing.KeysView>
- uid: azure.batch.models.BatchPoolEndpointConfiguration.pop
  name: pop
  summary: 'Removes specified key and return the corresponding value.

    :param str key: The key to pop.

    :param any default: The value to return if key is not in the dictionary

    :returns: The value corresponding to the key.

    :rtype: any

    :raises KeyError: If key is not found and default is not given.'
  signature: 'pop(key: str, default: ~typing.Any = <object object>) -> Any'
  parameters:
  - name: key
    isRequired: true
  - name: default
- uid: azure.batch.models.BatchPoolEndpointConfiguration.popitem
  name: popitem
  summary: 'Removes and returns some (key, value) pair

    :returns: The (key, value) pair.

    :rtype: tuple

    :raises KeyError: if D is empty.'
  signature: popitem() -> Tuple[str, Any]
- uid: azure.batch.models.BatchPoolEndpointConfiguration.setdefault
  name: setdefault
  summary: 'Same as calling D.get(k, d), and setting D[k]=d if k not found

    :param str key: The key to look up.

    :param any default: The value to set if key is not in the dictionary

    :returns: D[k] if k in D, else d.

    :rtype: any'
  signature: 'setdefault(key: str, default: ~typing.Any = <object object>) -> Any'
  parameters:
  - name: key
    isRequired: true
  - name: default
- uid: azure.batch.models.BatchPoolEndpointConfiguration.update
  name: update
  summary: 'Updates D from mapping/iterable E and F.

    :param any args: Either a mapping object or an iterable of key-value pairs.'
  signature: 'update(*args: Any, **kwargs: Any) -> None'
- uid: azure.batch.models.BatchPoolEndpointConfiguration.values
  name: values
  signature: values() -> ValuesView[Any]
  return:
    description: an object providing a view on D's values
    types:
    - <xref:typing.ValuesView>
attributes:
- uid: azure.batch.models.BatchPoolEndpointConfiguration.inbound_nat_pools
  name: inbound_nat_pools
  summary: 'A list of inbound NAT Pools that can be used to address specific ports
    on an individual Compute

    Node externally. The maximum number of inbound NAT Pools per Batch Pool is 5.
    If the maximum

    number of inbound NAT Pools is exceeded the request fails with HTTP status code
    400. This

    cannot be specified if the IPAddressProvisioningType is NoPublicIPAddresses. Required.'
  signature: 'inbound_nat_pools: List[_models.InboundNatPool]'
