### YamlMime:PythonClass
uid: azure.batch.models.BatchTaskContainerSettings
name: BatchTaskContainerSettings
fullName: azure.batch.models.BatchTaskContainerSettings
module: azure.batch.models
summary: The container settings for a Task.
constructor:
  syntax: 'BatchTaskContainerSettings(*args: Any, **kwargs: Any)'
variables:
- description: 'Additional options to the container create command. These

    additional options are supplied as arguments to the "docker create" command, in
    addition to

    those controlled by the Batch Service.'
  name: container_run_options
  types:
  - <xref:str>
- description: 'The Image to use to create the container in which the Task will run.
    This is

    the full Image reference, as would be specified to "docker pull". If no tag is
    provided as part

    of the Image name, the tag ":latest" is used as a default. Required.'
  name: image_name
  types:
  - <xref:str>
- description: 'The private registry which contains the container Image. This setting
    can be

    omitted if was already provided at Pool creation.'
  name: registry
  types:
  - <xref:azure.batch.models.ContainerRegistryReference>
- description: 'The location of the container Task working directory. The default
    is

    ''taskWorkingDirectory''. Known values are: "taskWorkingDirectory" and "containerImageDefault".'
  name: working_directory
  types:
  - <xref:str>
  - <xref:azure.batch.models.ContainerWorkingDirectory>
- description: 'The paths you want to mounted to container task. If

    this array is null or be not present, container task will mount entire temporary
    disk drive in

    windows (or AZ_BATCH_NODE_ROOT_DIR in Linux). It won''t'' mount any data paths
    into container if

    this array is set as empty.'
  name: container_host_batch_bind_mounts
  types:
  - <xref:list>[<xref:azure.batch.models.ContainerHostBatchBindMountEntry>]
methods:
- uid: azure.batch.models.BatchTaskContainerSettings.as_dict
  name: as_dict
  summary: Return a dict that can be turned into json using json.dump.
  signature: 'as_dict(*, exclude_readonly: bool = False) -> Dict[str, Any]'
  keywordOnlyParameters:
  - name: exclude_readonly
    description: Whether to remove the readonly properties.
    defaultValue: 'False'
    types:
    - <xref:bool>
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
- uid: azure.batch.models.BatchTaskContainerSettings.clear
  name: clear
  summary: Remove all items from D.
  signature: clear() -> None
- uid: azure.batch.models.BatchTaskContainerSettings.copy
  name: copy
  signature: copy() -> Model
- uid: azure.batch.models.BatchTaskContainerSettings.get
  name: get
  summary: 'Get the value for key if key is in the dictionary, else default.

    :param str key: The key to look up.

    :param any default: The value to return if key is not in the dictionary. Defaults
    to None

    :returns: D[k] if k in D, else d.

    :rtype: any'
  signature: 'get(key: str, default: Any = None) -> Any'
  parameters:
  - name: key
    isRequired: true
  - name: default
    defaultValue: None
- uid: azure.batch.models.BatchTaskContainerSettings.items
  name: items
  signature: items() -> ItemsView[str, Any]
  return:
    description: set-like object providing a view on D's items
    types:
    - <xref:typing.ItemsView>
- uid: azure.batch.models.BatchTaskContainerSettings.keys
  name: keys
  signature: keys() -> KeysView[str]
  return:
    description: a set-like object providing a view on D's keys
    types:
    - <xref:typing.KeysView>
- uid: azure.batch.models.BatchTaskContainerSettings.pop
  name: pop
  summary: 'Removes specified key and return the corresponding value.

    :param str key: The key to pop.

    :param any default: The value to return if key is not in the dictionary

    :returns: The value corresponding to the key.

    :rtype: any

    :raises KeyError: If key is not found and default is not given.'
  signature: 'pop(key: str, default: ~typing.Any = <object object>) -> Any'
  parameters:
  - name: key
    isRequired: true
  - name: default
- uid: azure.batch.models.BatchTaskContainerSettings.popitem
  name: popitem
  summary: 'Removes and returns some (key, value) pair

    :returns: The (key, value) pair.

    :rtype: tuple

    :raises KeyError: if D is empty.'
  signature: popitem() -> Tuple[str, Any]
- uid: azure.batch.models.BatchTaskContainerSettings.setdefault
  name: setdefault
  summary: 'Same as calling D.get(k, d), and setting D[k]=d if k not found

    :param str key: The key to look up.

    :param any default: The value to set if key is not in the dictionary

    :returns: D[k] if k in D, else d.

    :rtype: any'
  signature: 'setdefault(key: str, default: ~typing.Any = <object object>) -> Any'
  parameters:
  - name: key
    isRequired: true
  - name: default
- uid: azure.batch.models.BatchTaskContainerSettings.update
  name: update
  summary: 'Updates D from mapping/iterable E and F.

    :param any args: Either a mapping object or an iterable of key-value pairs.'
  signature: 'update(*args: Any, **kwargs: Any) -> None'
- uid: azure.batch.models.BatchTaskContainerSettings.values
  name: values
  signature: values() -> ValuesView[Any]
  return:
    description: an object providing a view on D's values
    types:
    - <xref:typing.ValuesView>
attributes:
- uid: azure.batch.models.BatchTaskContainerSettings.container_host_batch_bind_mounts
  name: container_host_batch_bind_mounts
  summary: 'The paths you want to mounted to container task. If this array is null
    or be not present,

    container task will mount entire temporary disk drive in windows (or AZ_BATCH_NODE_ROOT_DIR
    in

    Linux). It won''t'' mount any data paths into container if this array is set as
    empty.'
  signature: 'container_host_batch_bind_mounts: List[_models.ContainerHostBatchBindMountEntry]
    | None'
- uid: azure.batch.models.BatchTaskContainerSettings.container_run_options
  name: container_run_options
  summary: 'Additional options to the container create command. These additional options
    are supplied as

    arguments to the "docker create" command, in addition to those controlled by the
    Batch

    Service.'
  signature: 'container_run_options: str | None'
- uid: azure.batch.models.BatchTaskContainerSettings.image_name
  name: image_name
  summary: 'The Image to use to create the container in which the Task will run. This
    is the full Image

    reference, as would be specified to "docker pull". If no tag is provided as part
    of the Image

    name, the tag ":latest" is used as a default. Required.'
  signature: 'image_name: str'
- uid: azure.batch.models.BatchTaskContainerSettings.registry
  name: registry
  summary: 'The private registry which contains the container Image. This setting
    can be omitted if was

    already provided at Pool creation.'
  signature: 'registry: _models.ContainerRegistryReference | None'
- uid: azure.batch.models.BatchTaskContainerSettings.working_directory
  name: working_directory
  summary: 'The location of the container Task working directory. The default is ''taskWorkingDirectory''.

    Known values are: "taskWorkingDirectory" and "containerImageDefault".'
  signature: 'working_directory: str | _models.ContainerWorkingDirectory | None'
