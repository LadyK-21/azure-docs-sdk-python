### YamlMime:PythonClass
uid: azure.batch.models.ExitOptions
name: ExitOptions
fullName: azure.batch.models.ExitOptions
module: azure.batch.models
summary: Specifies how the Batch service responds to a particular exit condition.
constructor:
  syntax: 'ExitOptions(*args: Any, **kwargs: Any)'
variables:
- description: 'An action to take on the Job containing the Task, if the Task completes
    with

    the given exit condition and the Job''s onTaskFailed property is ''performExitOptionsJobAction''.

    The default is none for exit code 0 and terminate for all other exit conditions.
    If the Job''s

    onTaskFailed property is noaction, then specifying this property returns an error
    and the add

    Task request fails with an invalid property value error; if you are calling the
    REST API

    directly, the HTTP status code is 400 (Bad Request). Known values are: "none",
    "disable", and

    "terminate".'
  name: job_action
  types:
  - <xref:str>
  - <xref:azure.batch.models.BatchJobAction>
- description: 'An action that the Batch service performs on Tasks that depend on
    this

    Task. Possible values are ''satisfy'' (allowing dependent tasks to progress) and
    ''block''

    (dependent tasks continue to wait). Batch does not yet support cancellation of
    dependent tasks.

    Known values are: "satisfy" and "block".'
  name: dependency_action
  types:
  - <xref:str>
  - <xref:azure.batch.models.DependencyAction>
methods:
- uid: azure.batch.models.ExitOptions.as_dict
  name: as_dict
  summary: Return a dict that can be turned into json using json.dump.
  signature: 'as_dict(*, exclude_readonly: bool = False) -> Dict[str, Any]'
  keywordOnlyParameters:
  - name: exclude_readonly
    description: Whether to remove the readonly properties.
    defaultValue: 'False'
    types:
    - <xref:bool>
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
- uid: azure.batch.models.ExitOptions.clear
  name: clear
  summary: Remove all items from D.
  signature: clear() -> None
- uid: azure.batch.models.ExitOptions.copy
  name: copy
  signature: copy() -> Model
- uid: azure.batch.models.ExitOptions.get
  name: get
  summary: 'Get the value for key if key is in the dictionary, else default.

    :param str key: The key to look up.

    :param any default: The value to return if key is not in the dictionary. Defaults
    to None

    :returns: D[k] if k in D, else d.

    :rtype: any'
  signature: 'get(key: str, default: Any = None) -> Any'
  parameters:
  - name: key
    isRequired: true
  - name: default
    defaultValue: None
- uid: azure.batch.models.ExitOptions.items
  name: items
  signature: items() -> ItemsView[str, Any]
  return:
    description: set-like object providing a view on D's items
    types:
    - <xref:typing.ItemsView>
- uid: azure.batch.models.ExitOptions.keys
  name: keys
  signature: keys() -> KeysView[str]
  return:
    description: a set-like object providing a view on D's keys
    types:
    - <xref:typing.KeysView>
- uid: azure.batch.models.ExitOptions.pop
  name: pop
  summary: 'Removes specified key and return the corresponding value.

    :param str key: The key to pop.

    :param any default: The value to return if key is not in the dictionary

    :returns: The value corresponding to the key.

    :rtype: any

    :raises KeyError: If key is not found and default is not given.'
  signature: 'pop(key: str, default: ~typing.Any = <object object>) -> Any'
  parameters:
  - name: key
    isRequired: true
  - name: default
- uid: azure.batch.models.ExitOptions.popitem
  name: popitem
  summary: 'Removes and returns some (key, value) pair

    :returns: The (key, value) pair.

    :rtype: tuple

    :raises KeyError: if D is empty.'
  signature: popitem() -> Tuple[str, Any]
- uid: azure.batch.models.ExitOptions.setdefault
  name: setdefault
  summary: 'Same as calling D.get(k, d), and setting D[k]=d if k not found

    :param str key: The key to look up.

    :param any default: The value to set if key is not in the dictionary

    :returns: D[k] if k in D, else d.

    :rtype: any'
  signature: 'setdefault(key: str, default: ~typing.Any = <object object>) -> Any'
  parameters:
  - name: key
    isRequired: true
  - name: default
- uid: azure.batch.models.ExitOptions.update
  name: update
  summary: 'Updates D from mapping/iterable E and F.

    :param any args: Either a mapping object or an iterable of key-value pairs.'
  signature: 'update(*args: Any, **kwargs: Any) -> None'
- uid: azure.batch.models.ExitOptions.values
  name: values
  signature: values() -> ValuesView[Any]
  return:
    description: an object providing a view on D's values
    types:
    - <xref:typing.ValuesView>
attributes:
- uid: azure.batch.models.ExitOptions.dependency_action
  name: dependency_action
  summary: 'An action that the Batch service performs on Tasks that depend on this
    Task. Possible values

    are ''satisfy'' (allowing dependent tasks to progress) and ''block'' (dependent
    tasks continue to

    wait). Batch does not yet support cancellation of dependent tasks. Known values
    are:

    "satisfy" and "block".'
  signature: 'dependency_action: str | _models.DependencyAction | None'
- uid: azure.batch.models.ExitOptions.job_action
  name: job_action
  summary: 'An action to take on the Job containing the Task, if the Task completes
    with the given exit

    condition and the Job''s onTaskFailed property is ''performExitOptionsJobAction''.
    The default is

    none for exit code 0 and terminate for all other exit conditions. If the Job''s
    onTaskFailed

    property is noaction, then specifying this property returns an error and the add
    Task request

    fails with an invalid property value error; if you are calling the REST API directly,
    the HTTP

    status code is 400 (Bad Request). Known values are: "none", "disable", and "terminate".'
  signature: 'job_action: str | _models.BatchJobAction | None'
