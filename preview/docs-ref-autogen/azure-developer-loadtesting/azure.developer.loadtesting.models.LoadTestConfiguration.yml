### YamlMime:PythonClass
uid: azure.developer.loadtesting.models.LoadTestConfiguration
name: LoadTestConfiguration
fullName: azure.developer.loadtesting.models.LoadTestConfiguration
module: azure.developer.loadtesting.models
summary: Configurations for the load test.
constructor:
  syntax: 'LoadTestConfiguration(*args: Any, **kwargs: Any)'
variables:
- description: 'The number of engine instances to execute load test. Supported values

    are in range of 1-400. Required for creating a new test.'
  name: engine_instances
  types:
  - <xref:int>
- description: 'If false, Azure Load Testing copies and processes your input files

    unmodified

    across all test engine instances. If true, Azure Load Testing splits the CSV

    input data evenly across all engine instances. If you provide multiple CSV

    files, each file will be split evenly.'
  name: split_all_csvs
  types:
  - <xref:bool>
- description: 'If true, optionalLoadTestConfig is required and JMX script for the
    load

    test is

    not required to upload.'
  name: quick_start_test
  types:
  - <xref:bool>
- description: Configuration for quick load test.
  name: optional_load_test_config
  types:
  - <xref:azure.developer.loadtesting.models.OptionalLoadTestConfiguration>
- description: Region distribution configuration for the load test.
  name: regional_load_test_config
  types:
  - <xref:list>[<xref:azure.developer.loadtesting.models.RegionalConfiguration>]
methods:
- uid: azure.developer.loadtesting.models.LoadTestConfiguration.as_dict
  name: as_dict
  summary: Return a dict that can be turned into json using json.dump.
  signature: 'as_dict(*, exclude_readonly: bool = False) -> Dict[str, Any]'
  keywordOnlyParameters:
  - name: exclude_readonly
    description: Whether to remove the readonly properties.
    defaultValue: 'False'
    types:
    - <xref:bool>
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
- uid: azure.developer.loadtesting.models.LoadTestConfiguration.clear
  name: clear
  summary: Remove all items from D.
  signature: clear() -> None
- uid: azure.developer.loadtesting.models.LoadTestConfiguration.copy
  name: copy
  signature: copy() -> Model
- uid: azure.developer.loadtesting.models.LoadTestConfiguration.get
  name: get
  summary: 'Get the value for key if key is in the dictionary, else default.

    :param str key: The key to look up.

    :param any default: The value to return if key is not in the dictionary. Defaults
    to None

    :returns: D[k] if k in D, else d.

    :rtype: any'
  signature: 'get(key: str, default: Any = None) -> Any'
  parameters:
  - name: key
    isRequired: true
  - name: default
    defaultValue: None
- uid: azure.developer.loadtesting.models.LoadTestConfiguration.items
  name: items
  signature: items() -> ItemsView[str, Any]
  return:
    description: set-like object providing a view on D's items
    types:
    - <xref:typing.ItemsView>
- uid: azure.developer.loadtesting.models.LoadTestConfiguration.keys
  name: keys
  signature: keys() -> KeysView[str]
  return:
    description: a set-like object providing a view on D's keys
    types:
    - <xref:typing.KeysView>
- uid: azure.developer.loadtesting.models.LoadTestConfiguration.pop
  name: pop
  summary: 'Removes specified key and return the corresponding value.

    :param str key: The key to pop.

    :param any default: The value to return if key is not in the dictionary

    :returns: The value corresponding to the key.

    :rtype: any

    :raises KeyError: If key is not found and default is not given.'
  signature: 'pop(key: str, default: ~typing.Any = <object object>) -> Any'
  parameters:
  - name: key
    isRequired: true
  - name: default
- uid: azure.developer.loadtesting.models.LoadTestConfiguration.popitem
  name: popitem
  summary: 'Removes and returns some (key, value) pair

    :returns: The (key, value) pair.

    :rtype: tuple

    :raises KeyError: if D is empty.'
  signature: popitem() -> Tuple[str, Any]
- uid: azure.developer.loadtesting.models.LoadTestConfiguration.setdefault
  name: setdefault
  summary: 'Same as calling D.get(k, d), and setting D[k]=d if k not found

    :param str key: The key to look up.

    :param any default: The value to set if key is not in the dictionary

    :returns: D[k] if k in D, else d.

    :rtype: any'
  signature: 'setdefault(key: str, default: ~typing.Any = <object object>) -> Any'
  parameters:
  - name: key
    isRequired: true
  - name: default
- uid: azure.developer.loadtesting.models.LoadTestConfiguration.update
  name: update
  summary: 'Updates D from mapping/iterable E and F.

    :param any args: Either a mapping object or an iterable of key-value pairs.'
  signature: 'update(*args: Any, **kwargs: Any) -> None'
- uid: azure.developer.loadtesting.models.LoadTestConfiguration.values
  name: values
  signature: values() -> ValuesView[Any]
  return:
    description: an object providing a view on D's values
    types:
    - <xref:typing.ValuesView>
attributes:
- uid: azure.developer.loadtesting.models.LoadTestConfiguration.engine_instances
  name: engine_instances
  summary: 'The number of engine instances to execute load test. Supported values
    are in range of 1-400.

    Required for creating a new test.'
  signature: 'engine_instances: int | None'
- uid: azure.developer.loadtesting.models.LoadTestConfiguration.optional_load_test_config
  name: optional_load_test_config
  summary: Configuration for quick load test.
  signature: 'optional_load_test_config: _models.OptionalLoadTestConfiguration | None'
- uid: azure.developer.loadtesting.models.LoadTestConfiguration.quick_start_test
  name: quick_start_test
  summary: 'If true, optionalLoadTestConfig is required and JMX script for the load
    test is

    not required to upload.'
  signature: 'quick_start_test: bool | None'
- uid: azure.developer.loadtesting.models.LoadTestConfiguration.regional_load_test_config
  name: regional_load_test_config
  summary: Region distribution configuration for the load test.
  signature: 'regional_load_test_config: List[_models.RegionalConfiguration] | None'
- uid: azure.developer.loadtesting.models.LoadTestConfiguration.split_all_csvs
  name: split_all_csvs
  summary: 'If false, Azure Load Testing copies and processes your input files unmodified

    across all test engine instances. If true, Azure Load Testing splits the CSV

    input data evenly across all engine instances. If you provide multiple CSV

    files, each file will be split evenly.'
  signature: 'split_all_csvs: bool | None'
