### YamlMime:PythonClass
uid: azure.purview.datamap.models.AtlasClassification
name: AtlasClassification
fullName: azure.purview.datamap.models.AtlasClassification
module: azure.purview.datamap.models
summary: 'An instance of a classification; it doesn''t have an identity, this object

  exists only when associated with an entity.'
constructor:
  syntax: 'AtlasClassification(*args: Any, **kwargs: Any)'
variables:
- description: The attributes of the struct.
  name: attributes
  types:
  - <xref:dict>[<xref:str>, <xref:any>]
- description: The name of the type.
  name: type_name
  types:
  - <xref:str>
- description: ETag for concurrency control.
  name: last_modified_ts
  types:
  - <xref:str>
- description: The GUID of the entity.
  name: entity_guid
  types:
  - <xref:str>
- description: 'Status of the entity - can be active or deleted. Deleted entities
    are not

    removed. Known values are: "ACTIVE" and "DELETED".'
  name: entity_status
  types:
  - <xref:str>
  - <xref:azure.purview.datamap.models.EntityStatus>
- description: 'Determines if propagations will be removed on

    entity deletion.'
  name: remove_propagations_on_entity_delete
  types:
  - <xref:bool>
- description: An array of time boundaries indicating validity periods.
  name: validity_periods
  types:
  - <xref:list>[<xref:azure.purview.datamap.models.TimeBoundary>]
methods:
- uid: azure.purview.datamap.models.AtlasClassification.as_dict
  name: as_dict
  summary: Return a dict that can be turned into json using json.dump.
  signature: 'as_dict(*, exclude_readonly: bool = False) -> Dict[str, Any]'
  keywordOnlyParameters:
  - name: exclude_readonly
    description: Whether to remove the readonly properties.
    defaultValue: 'False'
    types:
    - <xref:bool>
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
- uid: azure.purview.datamap.models.AtlasClassification.clear
  name: clear
  summary: Remove all items from D.
  signature: clear() -> None
- uid: azure.purview.datamap.models.AtlasClassification.copy
  name: copy
  signature: copy() -> Model
- uid: azure.purview.datamap.models.AtlasClassification.get
  name: get
  summary: 'Get the value for key if key is in the dictionary, else default.

    :param str key: The key to look up.

    :param any default: The value to return if key is not in the dictionary. Defaults
    to None

    :returns: D[k] if k in D, else d.

    :rtype: any'
  signature: 'get(key: str, default: Any = None) -> Any'
  parameters:
  - name: key
    isRequired: true
  - name: default
    defaultValue: None
- uid: azure.purview.datamap.models.AtlasClassification.items
  name: items
  signature: items() -> ItemsView[str, Any]
  return:
    description: set-like object providing a view on D's items
    types:
    - <xref:typing.ItemsView>
- uid: azure.purview.datamap.models.AtlasClassification.keys
  name: keys
  signature: keys() -> KeysView[str]
  return:
    description: a set-like object providing a view on D's keys
    types:
    - <xref:typing.KeysView>
- uid: azure.purview.datamap.models.AtlasClassification.pop
  name: pop
  summary: 'Removes specified key and return the corresponding value.

    :param str key: The key to pop.

    :param any default: The value to return if key is not in the dictionary

    :returns: The value corresponding to the key.

    :rtype: any

    :raises KeyError: If key is not found and default is not given.'
  signature: 'pop(key: str, default: ~typing.Any = <object object>) -> Any'
  parameters:
  - name: key
    isRequired: true
  - name: default
- uid: azure.purview.datamap.models.AtlasClassification.popitem
  name: popitem
  summary: 'Removes and returns some (key, value) pair

    :returns: The (key, value) pair.

    :rtype: tuple

    :raises KeyError: if D is empty.'
  signature: popitem() -> Tuple[str, Any]
- uid: azure.purview.datamap.models.AtlasClassification.setdefault
  name: setdefault
  summary: 'Same as calling D.get(k, d), and setting D[k]=d if k not found

    :param str key: The key to look up.

    :param any default: The value to set if key is not in the dictionary

    :returns: D[k] if k in D, else d.

    :rtype: any'
  signature: 'setdefault(key: str, default: ~typing.Any = <object object>) -> Any'
  parameters:
  - name: key
    isRequired: true
  - name: default
- uid: azure.purview.datamap.models.AtlasClassification.update
  name: update
  summary: 'Updates D from mapping/iterable E and F.

    :param any args: Either a mapping object or an iterable of key-value pairs.'
  signature: 'update(*args: Any, **kwargs: Any) -> None'
- uid: azure.purview.datamap.models.AtlasClassification.values
  name: values
  signature: values() -> ValuesView[Any]
  return:
    description: an object providing a view on D's values
    types:
    - <xref:typing.ValuesView>
attributes:
- uid: azure.purview.datamap.models.AtlasClassification.attributes
  name: attributes
  summary: The attributes of the struct.
  signature: 'attributes: Dict[str, Any] | None'
- uid: azure.purview.datamap.models.AtlasClassification.entity_guid
  name: entity_guid
  summary: The GUID of the entity.
  signature: 'entity_guid: str | None'
- uid: azure.purview.datamap.models.AtlasClassification.entity_status
  name: entity_status
  summary: 'Status of the entity - can be active or deleted. Deleted entities are
    not

    removed. Known values are: "ACTIVE" and "DELETED".'
  signature: 'entity_status: str | _models.EntityStatus | None'
- uid: azure.purview.datamap.models.AtlasClassification.last_modified_ts
  name: last_modified_ts
  summary: ETag for concurrency control.
  signature: 'last_modified_ts: str | None'
- uid: azure.purview.datamap.models.AtlasClassification.remove_propagations_on_entity_delete
  name: remove_propagations_on_entity_delete
  summary: Determines if propagations will be removed on entity deletion.
  signature: 'remove_propagations_on_entity_delete: bool | None'
- uid: azure.purview.datamap.models.AtlasClassification.type_name
  name: type_name
  summary: The name of the type.
  signature: 'type_name: str | None'
- uid: azure.purview.datamap.models.AtlasClassification.validity_periods
  name: validity_periods
  summary: An array of time boundaries indicating validity periods.
  signature: 'validity_periods: List[_models.TimeBoundary] | None'
