### YamlMime:PythonClass
uid: azure.cognitiveservices.speech.diagnostics.logging.FileLogger
name: FileLogger
fullName: azure.cognitiveservices.speech.diagnostics.logging.FileLogger
module: azure.cognitiveservices.speech.diagnostics.logging
summary: 'A static class to control file-based SDK logging.

  Turning on logging while running your Speech SDK scenario provides

  detailed information from the SDK''s core native components. If you

  report an issue to Microsoft, you may be asked to provide logs to help

  Microsoft diagnose the issue. Your application should not take dependency

  on particular log strings, as they may change from one SDK release to another

  without notice.

  FileLogger is the simplest logging solution and suitable for diagnosing

  most on-device issues when running Speech SDK. Added in version 1.43.0


  File logging is a process wide construct. That means that if (for example)

  you have multiple speech recognizer objects running in parallel, there will be one

  log file containing interleaved log lines from all recognizers. You cannot get

  a separate log file for each recognizer.'
constructor:
  syntax: FileLogger()
methods:
- uid: azure.cognitiveservices.speech.diagnostics.logging.FileLogger.set_filters
  name: set_filters
  summary: 'Sets filters for logging messages to a file.

    Once filters are set, file logger will only be updated with log strings

    containing at least one of the strings specified by the filters. The match is
    case sensitive.'
  signature: 'static set_filters(filters: List[str] = [])'
  parameters:
  - name: filters
    description: Filters to use, or an empty list to remove previously set filters.
    defaultValue: '[]'
- uid: azure.cognitiveservices.speech.diagnostics.logging.FileLogger.set_level
  name: set_level
  summary: Sets the level of the messages to be captured by the logger.
  signature: 'static set_level(level: LogLevel = LogLevel.Info)'
  parameters:
  - name: level
    description: Maximum level of detail to be captured by the logger.
    defaultValue: LogLevel.Info
- uid: azure.cognitiveservices.speech.diagnostics.logging.FileLogger.start
  name: start
  summary: Starts logging to a file. If the file already exists, it will be overwritten
    unless append is set to True.
  signature: 'static start(file_path: str, append: bool = False)'
  parameters:
  - name: file_path
    isRequired: true
  - name: append
    defaultValue: 'False'
- uid: azure.cognitiveservices.speech.diagnostics.logging.FileLogger.stop
  name: stop
  summary: 'Stops logging to a file.

    This call is optional. If logging has been started,

    the log file will be written when the process exits normally.'
  signature: static stop()
